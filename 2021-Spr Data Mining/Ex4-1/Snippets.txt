wc -l ../data/apache-spark/sample_libsvm_data.txt

hadoop fs -put ../data/apache-spark/sample_libsvm_data.txt /user/data/CSC533DM/.

hadoop fs -ls /user/data/CSC533DM/

$ pyspark

data = spark.read.format("libsvm").load("/user/data/CSC533DM/sample_libsvm_data.txt")
from pyspark.ml.feature import StringIndexer
labelIndexer = StringIndexer(inputCol="label",outputCol="indexedLabel").fit(data)
labelIndexer.transform(data).show(5)

from pyspark.ml.feature import VectorIndexer
featureIndexer = VectorIndexer(inputCol="features", outputCol="indexedFeatures",maxCategories=4).fit(data)
featureIndexer.transform(data).show(5)

(trainingData, testData) = data.randomSplit([0.7, 0.3])

trainingData.show(5)
testData.show(5)



from pyspark.ml.classification import DecisionTreeClassifier
dt = DecisionTreeClassifier(labelCol="indexedLabel",featuresCol="indexedFeatures")
from pyspark.ml import Pipeline
pipeline = Pipeline(stages=[labelIndexer, featureIndexer, dt])
model = pipeline.fit(trainingData)
predictions = model.transform(testData)
#predictions.show(5)
predictions.select("prediction", "indexedLabel", "features").show(5)

from pyspark.ml.evaluation import MulticlassClassificationEvaluator
evaluator = MulticlassClassificationEvaluator(labelCol="indexedLabel",predictionCol="prediction", metricName="accuracy")
accuracy = evaluator.evaluate(predictions)
evaluator.setMetricName("weightedPrecision")
precision = evaluator.evaluate(predictions)
evaluator.setMetricName("weightedRecall")
Recall = evaluator.evaluate(predictions)
evaluator.setMetricName("f1")
f1Measure = evaluator.evaluate(predictions)

print("Accuracy: %g " % accuracy)
print("Precision: %g " % precision)
print("Recall: %g " % recall)
print("F1: %g " % f1Measure)