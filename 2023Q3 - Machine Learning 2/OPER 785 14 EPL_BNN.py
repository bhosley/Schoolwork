{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "6gGu7AgJkpAe",
        "outputId": "a64ef26e-de3e-41f2-c11b-69b617ef5c56",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "#Setting up to interface with file system on Google Drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Install necessary packages\n",
        "!pip install torch -q gwpy\n",
        "!pip install torchbnn -q gwpy\n",
        "!pip install torchmetrics -q gwpy"
      ],
      "metadata": {
        "id": "eu-ub8lBmGai",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9a206f3e-cb68-4b8b-e851-e583b6e91d42"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.4/1.4 MB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.4/45.4 kB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m51.0/51.0 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Building wheel for ligo-segments (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m731.6/731.6 kB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Import all packages\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torchbnn as bnn\n",
        "from sklearn.model_selection import train_test_split\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "Uc9_sWg8kuzI"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Read in data, randomly sort it\n",
        "raw_df = pd.read_csv(\"drive/MyDrive/Colab Notebooks/OPER 785 14 EPL_Value.csv\")\n",
        "raw_df = raw_df.sample(frac=1).reset_index(drop=True)\n",
        "\n",
        "#Visualize data\n",
        "raw_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "bkBQt9vS1pyj",
        "outputId": "d74ed675-1048-447c-f9df-f872bfbc8d10"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            name               club continent position  age  \\\n",
              "0      Ben Hamer     Leicester_City        UK       GK   29   \n",
              "1   Jack Butland         Stoke_City        UK       GK   24   \n",
              "2  Dale Stephens  Brighton_and_Hove        UK       CM   27   \n",
              "3  Harry Maguire     Leicester_City        UK       CB   24   \n",
              "4    John Stones    Manchester_City        UK       CB   23   \n",
              "\n",
              "   avg_daily_page_views  fpl_value  fpl_sel_pct  market_value  \n",
              "0                   132        4.5          0.1        500000  \n",
              "1                   402        5.0          2.8      15000000  \n",
              "2                   122        4.5          0.9       5000000  \n",
              "3                   488        5.0          1.5       8000000  \n",
              "4                  1078        5.5          2.3      35000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-21c9951e-3583-4f2e-9529-555fed475617\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>club</th>\n",
              "      <th>continent</th>\n",
              "      <th>position</th>\n",
              "      <th>age</th>\n",
              "      <th>avg_daily_page_views</th>\n",
              "      <th>fpl_value</th>\n",
              "      <th>fpl_sel_pct</th>\n",
              "      <th>market_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Ben Hamer</td>\n",
              "      <td>Leicester_City</td>\n",
              "      <td>UK</td>\n",
              "      <td>GK</td>\n",
              "      <td>29</td>\n",
              "      <td>132</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.1</td>\n",
              "      <td>500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Jack Butland</td>\n",
              "      <td>Stoke_City</td>\n",
              "      <td>UK</td>\n",
              "      <td>GK</td>\n",
              "      <td>24</td>\n",
              "      <td>402</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2.8</td>\n",
              "      <td>15000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Dale Stephens</td>\n",
              "      <td>Brighton_and_Hove</td>\n",
              "      <td>UK</td>\n",
              "      <td>CM</td>\n",
              "      <td>27</td>\n",
              "      <td>122</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.9</td>\n",
              "      <td>5000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Harry Maguire</td>\n",
              "      <td>Leicester_City</td>\n",
              "      <td>UK</td>\n",
              "      <td>CB</td>\n",
              "      <td>24</td>\n",
              "      <td>488</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.5</td>\n",
              "      <td>8000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>John Stones</td>\n",
              "      <td>Manchester_City</td>\n",
              "      <td>UK</td>\n",
              "      <td>CB</td>\n",
              "      <td>23</td>\n",
              "      <td>1078</td>\n",
              "      <td>5.5</td>\n",
              "      <td>2.3</td>\n",
              "      <td>35000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21c9951e-3583-4f2e-9529-555fed475617')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-21c9951e-3583-4f2e-9529-555fed475617 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-21c9951e-3583-4f2e-9529-555fed475617');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cdfa1f67-61e2-4fc9-a10d-c7aebf4f5d6c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cdfa1f67-61e2-4fc9-a10d-c7aebf4f5d6c')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cdfa1f67-61e2-4fc9-a10d-c7aebf4f5d6c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#One-hot encode club, continent, and position\n",
        "club = pd.get_dummies(raw_df.club)\n",
        "continent = pd.get_dummies(raw_df.continent)\n",
        "position = pd.get_dummies(raw_df.position)"
      ],
      "metadata": {
        "id": "PuwoHj-31wbj"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Section out, keep names, standardize numerical features\n",
        "names = raw_df[['name']]\n",
        "numerical = raw_df[['age', 'avg_daily_page_views', 'fpl_value', 'fpl_sel_pct']]\n",
        "numerical_sd = (numerical - numerical.mean(axis=0))/(numerical.std(axis=0,ddof=1))\n",
        "market_value = raw_df[['market_value']]"
      ],
      "metadata": {
        "id": "Ggs86FUJ2yv5"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Combine player features, our X\n",
        "player_features = pd.concat([names, club, continent, position, numerical_sd], axis = 1)\n",
        "player_features.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "QXeppA0S2zfM",
        "outputId": "2f59d97a-ce5a-4b27-a08b-f469e7968c81"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            name  Arsenal  Bournemouth  Brighton_and_Hove  Burnley  Chelsea  \\\n",
              "0      Ben Hamer        0            0                  0        0        0   \n",
              "1   Jack Butland        0            0                  0        0        0   \n",
              "2  Dale Stephens        0            0                  1        0        0   \n",
              "3  Harry Maguire        0            0                  0        0        0   \n",
              "4    John Stones        0            0                  0        0        0   \n",
              "\n",
              "   Crystal_Palace  Everton  Huddersfield  Leicester_City  ...  LM  LW  RB  RM  \\\n",
              "0               0        0             0               1  ...   0   0   0   0   \n",
              "1               0        0             0               0  ...   0   0   0   0   \n",
              "2               0        0             0               0  ...   0   0   0   0   \n",
              "3               0        0             0               1  ...   0   0   0   0   \n",
              "4               0        0             0               0  ...   0   0   0   0   \n",
              "\n",
              "   RW  SS       age  avg_daily_page_views  fpl_value  fpl_sel_pct  \n",
              "0   0   0  0.551734             -0.679352  -0.702373    -0.554529  \n",
              "1   0   0 -0.710941             -0.389725  -0.331430    -0.079218  \n",
              "2   0   0  0.046664             -0.690079  -0.702373    -0.413697  \n",
              "3   0   0 -0.710941             -0.297474  -0.331430    -0.308072  \n",
              "4   0   0 -0.963476              0.335415   0.039514    -0.167239  \n",
              "\n",
              "[5 rows x 43 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-076913fb-2266-4f83-879a-38464cba2c2c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>Arsenal</th>\n",
              "      <th>Bournemouth</th>\n",
              "      <th>Brighton_and_Hove</th>\n",
              "      <th>Burnley</th>\n",
              "      <th>Chelsea</th>\n",
              "      <th>Crystal_Palace</th>\n",
              "      <th>Everton</th>\n",
              "      <th>Huddersfield</th>\n",
              "      <th>Leicester_City</th>\n",
              "      <th>...</th>\n",
              "      <th>LM</th>\n",
              "      <th>LW</th>\n",
              "      <th>RB</th>\n",
              "      <th>RM</th>\n",
              "      <th>RW</th>\n",
              "      <th>SS</th>\n",
              "      <th>age</th>\n",
              "      <th>avg_daily_page_views</th>\n",
              "      <th>fpl_value</th>\n",
              "      <th>fpl_sel_pct</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Ben Hamer</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.551734</td>\n",
              "      <td>-0.679352</td>\n",
              "      <td>-0.702373</td>\n",
              "      <td>-0.554529</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Jack Butland</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.710941</td>\n",
              "      <td>-0.389725</td>\n",
              "      <td>-0.331430</td>\n",
              "      <td>-0.079218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Dale Stephens</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.046664</td>\n",
              "      <td>-0.690079</td>\n",
              "      <td>-0.702373</td>\n",
              "      <td>-0.413697</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Harry Maguire</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.710941</td>\n",
              "      <td>-0.297474</td>\n",
              "      <td>-0.331430</td>\n",
              "      <td>-0.308072</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>John Stones</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.963476</td>\n",
              "      <td>0.335415</td>\n",
              "      <td>0.039514</td>\n",
              "      <td>-0.167239</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 43 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-076913fb-2266-4f83-879a-38464cba2c2c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-076913fb-2266-4f83-879a-38464cba2c2c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-076913fb-2266-4f83-879a-38464cba2c2c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-843b205f-02bd-4960-8588-b02341352c05\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-843b205f-02bd-4960-8588-b02341352c05')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-843b205f-02bd-4960-8588-b02341352c05 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Pull 23 players for our holdout dataset (one whole \"club\", 5% of data)\n",
        "model_x = player_features.iloc[:437,1:]\n",
        "holdout_x = player_features.iloc[437:,1:]\n",
        "model_y = market_value.iloc[:437,:]\n",
        "holdout_y = market_value.iloc[437:,:]\n",
        "holdout_names = player_features.iloc[437:,0:1]"
      ],
      "metadata": {
        "id": "4QdPIeqs2--r"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#PyTorch wants numpy arrays\n",
        "X = pd.DataFrame.to_numpy(model_x)\n",
        "Y = pd.DataFrame.to_numpy(model_y)\n",
        "\n",
        "Xh = pd.DataFrame.to_numpy(holdout_x)\n",
        "Yh = pd.DataFrame.to_numpy(holdout_y)"
      ],
      "metadata": {
        "id": "jqopLdnj3sP_"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Convert to torch tensors\n",
        "x, y = torch.from_numpy(X).float(), torch.from_numpy(Y).float()\n",
        "xh, yh = torch.from_numpy(Xh).float(), torch.from_numpy(Yh).float()"
      ],
      "metadata": {
        "id": "yAtAaknF3zWt"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Build simple BNN\n",
        "model = nn.Sequential(\n",
        "    bnn.BayesLinear(prior_mu=0, prior_sigma=1, in_features=42, out_features=80),\n",
        "    nn.SELU(),\n",
        "    bnn.BayesLinear(prior_mu=0, prior_sigma=1, in_features=80, out_features=50),\n",
        "    nn.SELU(),\n",
        "    bnn.BayesLinear(prior_mu=0, prior_sigma=1, in_features=50, out_features=30),\n",
        "    nn.SELU(),\n",
        "    bnn.BayesLinear(prior_mu=0, prior_sigma=1, in_features=30, out_features=10),\n",
        "    nn.SELU(),\n",
        "    bnn.BayesLinear(prior_mu=0, prior_sigma=1, in_features=10, out_features=1),\n",
        ")\n",
        "\n",
        "mse_loss = nn.MSELoss()\n",
        "kl_loss = bnn.BKLLoss(reduction='mean', last_layer_only=False)\n",
        "\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.01)"
      ],
      "metadata": {
        "id": "5BTheLar4UiH"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Increased KL weights since MSE is so large\n",
        "kl_weight = 500\n",
        "\n",
        "for step in range(5000):\n",
        "    pre = model(x)\n",
        "    mse = mse_loss(pre, y)\n",
        "    kl = kl_loss(model)\n",
        "    cost = mse + kl_weight*kl\n",
        "\n",
        "    optimizer.zero_grad()\n",
        "    cost.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "print('- MSE : %2.2f, KL : %2.2f' % (mse.item(), kl.item()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xm-6HxW85Vi1",
        "outputId": "37ba8185-2d22-4e81-8451-193ec8e7c1ff"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "- MSE : 6765394001920.00, KL : 2.58\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create array that will record 100 predictions\n",
        "preds = np.zeros((23,100))\n",
        "for i in range(100):\n",
        "  y_pred = model(xh)\n",
        "  preds[:,i:] = y_pred.data.numpy()\n",
        "\n",
        "#Cis array will save mean, standard deviation, lower and upper 95% bounds, and true value\n",
        "CIs = np.zeros((23,5))\n",
        "\n",
        "for i in range(len(preds)):\n",
        "  CIs[i,0] = np.mean(preds[i,:], axis = 0)\n",
        "  CIs[i,1] = np.std(preds[i,:], axis = 0)\n",
        "  CIs[i,2] = CIs[i,0] - 1.96*CIs[i,1]\n",
        "  CIs[i,3] = CIs[i,0] + 1.96*CIs[i,1]\n",
        "  CIs[i,4] = Yh[i]\n",
        "\n",
        "#Clean up the messy digits\n",
        "CIs = np.round(CIs, 0)"
      ],
      "metadata": {
        "id": "toPeMYcx6C38"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Print results\n",
        "for i in range(len(CIs)):\n",
        "  print('Player Name:', holdout_names.iloc[i,0])\n",
        "  print('Transfer Market Value Summer of 2017:',CIs[i,4])\n",
        "  print('95% CI for Prediction: (',CIs[i,2],',',CIs[i,3],')')\n",
        "\n",
        "  if (CIs[i,4]<=CIs[i,3]) and (CIs[i,4]>=CIs[i,2]):\n",
        "    print('True Value Contained in Interval')\n",
        "  else:\n",
        "    print('True Value Not Contained in Interval')\n",
        "    if CIs[i,4] < CIs[i,2]:\n",
        "      print('Model Overpredicted')\n",
        "    else:\n",
        "      print('Model Underpredicted')\n",
        "  print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h9jlEapI9xF-",
        "outputId": "d5cf209e-f06d-43e5-b10f-56b90e4c3fa5"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Player Name: Charlie Austin\n",
            "Transfer Market Value Summer of 2017: 13000000.0\n",
            "95% CI for Prediction: ( 6667260.0 , 9884248.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Underpredicted\n",
            "\n",
            "Player Name: Eden Hazard\n",
            "Transfer Market Value Summer of 2017: 75000000.0\n",
            "95% CI for Prediction: ( 63578350.0 , 73283711.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Underpredicted\n",
            "\n",
            "Player Name: Nathan Dyer\n",
            "Transfer Market Value Summer of 2017: 3500000.0\n",
            "95% CI for Prediction: ( 1376267.0 , 2857340.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Underpredicted\n",
            "\n",
            "Player Name: Idrissa Gueye\n",
            "Transfer Market Value Summer of 2017: 18000000.0\n",
            "95% CI for Prediction: ( 1503955.0 , 3098603.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Underpredicted\n",
            "\n",
            "Player Name: Daniel Amartey\n",
            "Transfer Market Value Summer of 2017: 5000000.0\n",
            "95% CI for Prediction: ( 6503866.0 , 9228009.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Overpredicted\n",
            "\n",
            "Player Name: Sadio Mane\n",
            "Transfer Market Value Summer of 2017: 40000000.0\n",
            "95% CI for Prediction: ( 38283973.0 , 45717156.0 )\n",
            "True Value Contained in Interval\n",
            "\n",
            "Player Name: Allan Nyom\n",
            "Transfer Market Value Summer of 2017: 4500000.0\n",
            "95% CI for Prediction: ( 4849228.0 , 7781717.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Overpredicted\n",
            "\n",
            "Player Name: Patrick van Aanholt\n",
            "Transfer Market Value Summer of 2017: 9000000.0\n",
            "95% CI for Prediction: ( 5836944.0 , 8323858.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Underpredicted\n",
            "\n",
            "Player Name: Tyrone Mings\n",
            "Transfer Market Value Summer of 2017: 5000000.0\n",
            "95% CI for Prediction: ( 985136.0 , 4168251.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Underpredicted\n",
            "\n",
            "Player Name: Sofiane Boufal\n",
            "Transfer Market Value Summer of 2017: 15000000.0\n",
            "95% CI for Prediction: ( 12765490.0 , 16248636.0 )\n",
            "True Value Contained in Interval\n",
            "\n",
            "Player Name: Kelechi Iheanacho\n",
            "Transfer Market Value Summer of 2017: 15000000.0\n",
            "95% CI for Prediction: ( 12662358.0 , 18118382.0 )\n",
            "True Value Contained in Interval\n",
            "\n",
            "Player Name: Cheikhou Kouyate\n",
            "Transfer Market Value Summer of 2017: 12000000.0\n",
            "95% CI for Prediction: ( 11742375.0 , 15293532.0 )\n",
            "True Value Contained in Interval\n",
            "\n",
            "Player Name: Mark Noble\n",
            "Transfer Market Value Summer of 2017: 7000000.0\n",
            "95% CI for Prediction: ( 7814266.0 , 11486989.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Overpredicted\n",
            "\n",
            "Player Name: Tomer Hemed\n",
            "Transfer Market Value Summer of 2017: 2500000.0\n",
            "95% CI for Prediction: ( 2009714.0 , 4072782.0 )\n",
            "True Value Contained in Interval\n",
            "\n",
            "Player Name: Jordan Henderson\n",
            "Transfer Market Value Summer of 2017: 28000000.0\n",
            "95% CI for Prediction: ( 11640578.0 , 14397928.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Underpredicted\n",
            "\n",
            "Player Name: Christian Benteke\n",
            "Transfer Market Value Summer of 2017: 28000000.0\n",
            "95% CI for Prediction: ( 15062592.0 , 20474868.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Underpredicted\n",
            "\n",
            "Player Name: David Ospina\n",
            "Transfer Market Value Summer of 2017: 7000000.0\n",
            "95% CI for Prediction: ( -56144.0 , 661335.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Underpredicted\n",
            "\n",
            "Player Name: Alfie Mawson\n",
            "Transfer Market Value Summer of 2017: 6000000.0\n",
            "95% CI for Prediction: ( 3957988.0 , 6157357.0 )\n",
            "True Value Contained in Interval\n",
            "\n",
            "Player Name: Christian Atsu\n",
            "Transfer Market Value Summer of 2017: 5000000.0\n",
            "95% CI for Prediction: ( 6752528.0 , 9984029.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Overpredicted\n",
            "\n",
            "Player Name: Dean Marney\n",
            "Transfer Market Value Summer of 2017: 1000000.0\n",
            "95% CI for Prediction: ( -104504.0 , 259949.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Underpredicted\n",
            "\n",
            "Player Name: Stephen Ward\n",
            "Transfer Market Value Summer of 2017: 1500000.0\n",
            "95% CI for Prediction: ( 2620891.0 , 4045299.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Overpredicted\n",
            "\n",
            "Player Name: Leon Britton\n",
            "Transfer Market Value Summer of 2017: 1000000.0\n",
            "95% CI for Prediction: ( 46125.0 , 1543677.0 )\n",
            "True Value Contained in Interval\n",
            "\n",
            "Player Name: Alex Oxlade-Chamberlain\n",
            "Transfer Market Value Summer of 2017: 22000000.0\n",
            "95% CI for Prediction: ( 12151180.0 , 15989252.0 )\n",
            "True Value Not Contained in Interval\n",
            "Model Underpredicted\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "XBINNo-y_Qg9"
      },
      "execution_count": 15,
      "outputs": []
    }
  ]
}